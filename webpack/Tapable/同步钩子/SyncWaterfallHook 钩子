#### 基本逻辑

`waterfall` 钩子的执行逻辑大致上就是**会将前一个函数的返回值作为参数传入下一个函数**，可以简化为如下代码：

```js
function waterfallCall(arg) {
  const callbacks = [fn1, fn2, fn3];
  let lastResult = arg;
  for (let i in callbacks) {
    const cb = callbacks[i];
    // 上次执行结果作为参数传入下一个函数
    lastResult = cb(lastResult);
  }
  return lastResult;
}
```

理解上述逻辑后，`SyncWaterfallHook` 的特点也就很明确了：

1. 上一个函数的结果会被带入下一个函数
2. 最后一个回调的结果会作为 call 调用的结果返回

#### 示例

```js
const { SyncWaterfallHook } = require("tapable");

class Somebody {
  constructor() {
    this.hooks = {
      sleep: new SyncWaterfallHook(["msg"]),
    };
  }
  sleep() {
    return this.hooks.sleep.call("hello");
  }
}

const person = new Somebody();

// 注册回调
person.hooks.sleep.tap("test", (arg) => {
  console.log(`call 调用传入： ${arg}`);
  return "tecvan";
});

person.hooks.sleep.tap("test", (arg) => {
  console.log(`A 回调返回： ${arg}`);
  return "world";
});

console.log("最终结果：" + person.sleep());
// 运行结果：
// call 调用传入： hello
// A 回调返回： tecvan
// 最终结果：world
```

示例中，`sleep` 钩子为 `SyncWaterfallHook` 类型，之后注册了两个回调，从处理结果可以看到第一个回调收到的 `arg = hello` ，即第10行 `call` 调用时传入的参数；第二个回调收到的是第一个回调返回的结果 `tecvan`；之后 `call` 调用返回的是第二个回调的结果 `world` 。

使用上，`SyncWaterfallHook` 钩子有一些注意事项：

- 初始化时必须提供参数，例如上例 `new SyncWaterfallHook(["msg"])` 构造函数中必须传入参数 `["msg"]` ，用于动态编译 `call` 的参数依赖，后面会讲到**「动态编译」**的细节。
- 发布调用 `call` 时，需要传入初始参数

#### Webpack 场景解析

`SyncWaterfallHook` 在 webpack 中比较有代表性的例子是 `NormalModuleFactory.hooks.factory` ，在 webpack 内部实现中，会在这个钩子内根据资源类型 `resolve` 出对应的 `module` 对象：

```js
class NormalModuleFactory {
  constructor() {
    this.hooks = {
      factory: new SyncWaterfallHook(["filename", "data"]),
    };

    this.hooks.factory.tap("NormalModuleFactory", () => (result, callback) => {
      let resolver = this.hooks.resolver.call(null);

      if (!resolver) return callback();

      resolver(result, (err, data) => {
        if (err) return callback(err);

        // direct module
        if (typeof data.source === "function") return callback(null, data);

        // ...
      });
    });
  }

  create(data, callback) {
    //   ...
    const factory = this.hooks.factory.call(null);
    // ...
  }
}
```

大致上就是在创建模块，通过 `factory` 钩子将 `module` 的创建过程外包出去，在钩子回调队列中依据 `waterfall` 的特性逐步推断出最终的 `module` 对象。

